/**
 * File: PolynomialLinkedB.java
 * 
 * @author Mingyu Chen
 * @author Daniel Myers
 * @version 4/5/2013
 * 
 *          Description: Class to Manipulate Polynomial
 */



import java.util.LinkedList;
import java.util.ListIterator;

public class PolynomialLinkedB implements Polynomial{

	// Private field.
	private LinkedList<PolyTerm> list;

	/**
	 * Default constructor.
	 */
	public PolynomialLinkedB() {
		list = new LinkedList<PolyTerm>();
	}
	
	
	
	/**
	 * get the coefficient of the term with the specified power
	 * @param power The power of the specified coefficient
	 * @return the coefficient of the specified power
	 */

	public int getCoefficient(int power){
		ListIterator<PolyTerm> iter = list.listIterator();
		while(iter.hasNext()){
			PolyTerm currPower = iter.next();
			if(currPower.num==power){
				return currPower.coef;
			}
		}
		return 0;
	}
	
	
	/**
	 * Sets the coefficient of the term with the specified power to the specified value
	 * @param coef The value of coefficient to set
	 * @param power The power to set the coefficient
	 */

	public void setCoefficient(int coef, int power){
		ListIterator<PolyTerm> iter = list.listIterator();
		if(list.size()==0){
			System.err.println("No polynomial to overwrite.");
			return;
		}
		while(iter.hasNext()){
			PolyTerm currPower = iter.next();
			if(currPower.num==power){
				currPower.coef=coef;
				return;
			}
		}
	}
	
	
	
	/**
	 * Adds the specified coefficient to the existing coefficient of the specified term
	 * @param coef The value of coefficient to add
	 * @param power The power to add the coefficient
	 */

	public void addCoefficient(int coef, int power){
		ListIterator<PolyTerm> iter = list.listIterator();
		if(coef == 0){
			return;
		}
		if(list.size()==0){
			iter.add(new PolyTerm(power, coef));
		}
		while(iter.hasNext()){
			PolyTerm currPower = iter.next();
			if(currPower.num == power){
				if(currPower.coef == -coef){
					return;
				}
				currPower.coef += coef;
				return;
			}
			else if (currPower.num>power){
				if(!iter.hasNext()){
					iter.add(new PolyTerm(power, coef));
				}
			}
			else{
				iter.previous();
				iter.add(new PolyTerm(power, coef));
				return;
			}
		}

	}
	
	
	
	/**
	 * print the polynomial
	 * @return  a string representation of the polynomial
	 */

	public String toString(){
		ListIterator<PolyTerm> iter = list.listIterator();
		String poly="";
		PolyTerm currPower;

		if(iter.hasNext()){
			currPower = iter.next();

			if(currPower.num == 0){
				poly += currPower.coef;
			}else if(currPower.num == 1){
				poly += currPower.coef+""+" * "+""+"x";
			}else{
				poly += currPower.coef+""+" * "+""+"x"+"^"+currPower.num;
			}
		}


		while(iter.hasNext()){
			currPower = iter.next();
			if(currPower.coef < 0){
				if(currPower.num == 0){
					poly += " - " + -currPower.coef;
				}else if(currPower.num == 1){
					poly += " - " + -currPower.coef+""+" * "+""+"x";
				}else{
					poly += " - " + -currPower.coef+""+" * "+""+"x"+"^"+currPower.num;
				}

			}else{
				if(currPower.num == 0){
					poly += " + "+""+ currPower.coef;
				}else if(currPower.num == 1){
					poly += " + "+""+ currPower.coef+""+" * "+""+"x";
				}else{
					poly += " + "+""+ currPower.coef+""+" * "+""+"x"+"^"+currPower.num;
				}
			}
		}
		return poly;
	}
	
	
	
	
	
	/**
	 * Evaluates the polynomial for the value x
	 * @param x The value used to evaluate the polynomial
	 * @return The value of the polynomial
	 */
	
	public double evaluate(double x){
		ListIterator<PolyTerm> iter = list.listIterator();
		double result=0;

		while(iter.hasNext()){
			PolyTerm currPower = iter.next();
			result = result + currPower.coef*Math.pow(x, currPower.num);

		}
		return result;

	}
	
	
	
	
	/**
	 * Add the calling polynomial to the parameter polynomial
	 * @param p The polynomial used to add the calling polynomial
	 * @return The sum of two polynomials
	 */

	public Polynomial add(Polynomial p){
		PolynomialLinkedB p2 = (PolynomialLinkedB) p;
		PolynomialLinkedB p3 = new PolynomialLinkedB();
		ListIterator<PolyTerm> iter1 = list.listIterator();
		ListIterator<PolyTerm> iter2 = p2.list.listIterator();
		ListIterator<PolyTerm> iter3 = p3.list.listIterator();
		PolyTerm currPower1 = iter1.next();
		PolyTerm currPower2 = iter2.next();
		while(iter2.hasNext() && iter1.hasNext()){
			if(currPower2.num == currPower1.num){
				currPower1.coef += currPower2.coef;
				iter3.add(currPower1);
				currPower1 = iter1.next();
				currPower2 = iter2.next();
			}
			else if (currPower2.num<currPower1.num){
				iter3.add(currPower1);
				currPower1 = iter1.next();

			}
			else{
				iter3.add(currPower2);
				currPower2 = iter2.next();
			}
		}
		if(iter1.hasNext()){
			iter3.add(currPower1);

			while (iter1.hasNext()) {
				iter3.add(iter1.next());
			}
		}else{
			iter3.add(currPower2);

			while (iter2.hasNext()) {
				iter3.add(iter2.next());
			}
		}
		p2.list.clear();
		list.clear();

		return (Polynomial)p3;
	}

	private class PolyTerm {

		private int num;
		private int coef;

		public PolyTerm(int n,int c) {
			num = n;
			coef = c;
		}
	}
}
