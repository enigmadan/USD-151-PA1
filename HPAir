import java.io.File;
import java.io.FileNotFoundException;
import java.util.EmptyStackException;
import java.util.Scanner;
import java.util.LinkedList;
import java.util.Stack;



public class HPAir {
	private City [] cities;
	private LinkedList<Path> path = new LinkedList<Path>();


	public HPAir(String cityfile, String flightfile, String requestfile)throws FileNotFoundException{


		Scanner cityInput = new Scanner(new File(cityfile));
		Scanner cityInput2 = new Scanner(new File(cityfile));
		Scanner flightInput = new Scanner(new File(flightfile));
		Scanner requests = new Scanner(new File(requestfile));

		int counter = 0;
		while(cityInput.hasNext()){
			cityInput.nextLine();
			counter++;
		}
		cities = new City[counter];
		for(int i = 0;cityInput2.hasNext();i++){
			cities[i]=new City(cityInput2.nextLine().trim());

		}
		while(flightInput.hasNext()){
			String line = flightInput.nextLine();
			Scanner flightData = new Scanner(line);
			flightData.useDelimiter(",");
			String sourceName = flightData.next().trim();
			City source = findCity(sourceName);
			String destName=flightData.next().trim();
			City dest = findCity(destName);
			int flightNumber = Integer.parseInt(flightData.next().trim());
			int flightCost = Integer.parseInt(flightData.next().trim());
			Flight flight = new Flight(source,dest,flightNumber,flightCost);
			source.flightList.add(flight);


		}
		while(requests.hasNext()){
			String line = requests.nextLine();
			Scanner flightRequest = new Scanner(line);
			flightRequest.useDelimiter(",");
			String sourceName = flightRequest.next().trim();
			String destName=flightRequest.next().trim();
			fly(sourceName,destName);
		}
	}

	private City findCity(String s){
		if(cities.length==0){
			throw new EmptyStackException ();

		}

		for(int i =0;i<cities.length;i++){
			if(s.equals(cities[i].name)){
				return cities[i];
			}

		}
		return null;
	}
	public void fly(String s, String d){
		System.out.print("Request is to fly from "+s+" to "+d+".\n");
		if(findCity(s)==null){
			System.out.print("We currently do not serve "+s);
			if(findCity(d)==null){
				System.out.print(" or "+d+".\n\n");
			}else{
				System.out.print("\n");
			}
		}else if(findCity(d)==null){
			System.out.println("We currently do not serve "+d+".\n");
		}else{
			Stack<City> itinerary = isPath(findCity(s),findCity(d));
			if(itinerary.isEmpty()){
				System.out.println("Sorry, we do not fly from "+s+" to "+d+".\n");
			}else{
				Stack<City> reverse = new Stack<City>();
				while(!itinerary.isEmpty()){
					reverse.push(itinerary.pop());
				}
				int totalCost = 0;
				for(int i = reverse.size()-1;i>0;i--){
					totalCost += reverse.get(i).flightList.get(
							reverse.get(i).flightList.indexOf(
									reverse.get(i-1))).cost;
					System.out.println("Flight #"+reverse.get(i).flightList.get(
							reverse.get(i).flightList.indexOf(
									reverse.get(i-1))).number+
									" from "+s+" to "+d+"  Cost: $"+
									reverse.get(i).flightList.get(
											reverse.get(i).flightList.indexOf(
													reverse.get(i-1))).cost);
				}
				System.out.println("Total Cost ............. $"+totalCost+"\n");
			}
			reset();
		}
	}
	private Stack<City> isPath(City s, City d){
		Stack<City> itinerary = new Stack<City>();

		itinerary.add(s);
		s.visited = true;
		while(!itinerary.isEmpty() && itinerary.peek() != d){
			City curCity = itinerary.peek();
			if(allVisited(curCity) == -1/*no unvisited cities from curCity remain*/){
				itinerary.pop();
			}else{
				City c = curCity.flightList.get(allVisited(curCity)).dest/* = next unvisited city in curCity*/;
				itinerary.push(c);
			}
		}
		return itinerary;
	}

	private int allVisited(City curr){
		for(int i = 0; i < curr.flightList.size();i++){
			if(!curr.flightList.get(i).dest.visited)
				return i;
		}
		return -1;
	}

	private void reset(){
		//reset returns all City.visited booleans to false
		for(int i = 0;i<cities.length;i++){
			cities[i].visited = false;
		}
	}

	private int getCost(Stack<City> it){
		//getCost returns the total cost of travel from the bottom of a stack to the top
		int total = 0;
		int blah = it.size();
		for(int i = 0;i<it.size()-1;i++){
			total += it.get(i).flightList.get(it.get(i).flightList.indexOf(it.get(i+1))).cost;
		}
		return total;
	}

	/*Test class to find shortest path*/

	public class Path{
		public Stack<City> itin;
		public int cost;

		public Path(Stack<City> i){
			itin = i;
			cost = getCost(itin);

		}
	}
	public class City{
		public String name;
		public LinkedList<Flight> flightList;
		public boolean visited;

		public City(String n){
			name=n;
			flightList= new LinkedList<Flight>();
			visited = false;
		}

	}
	public class Flight {
		public City source;
		public City dest;
		public int number;
		public int cost;
		public Flight(City s, City d,int n ,int c){
			source=s;
			dest=d;
			number=n;
			cost=c;
		}
	}

}
